/**
 * –°–û–í–†–ï–ú–ï–ù–ù–´–ô JAVASCRIPT –î–õ–Ø –õ–ï–ù–î–ò–ù–ì–ê –ï–õ–ï–ù–´ –ì–†–ï–ë–ï–ù–¶–û–í–û–ô
 * –≠—Ñ—Ñ–µ–∫—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–∞—Ä–∞–ª–ª–∞–∫—Å
 */

// ========================================
// –ì–õ–ê–í–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ù–ê–°–¢–†–û–ô–ö–ò
// ========================================

const TYPING_SPEED = 80; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏
const TYPING_DELAY = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
const PARTICLE_COUNT = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü

// –¢–µ–∫—Å—Ç –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∞—é—â–µ–π—Å—è –º–∞—à–∏–Ω–∫–∏
const typingTexts = [
    "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å —Å 1999 –≥–æ–¥–∞",
    "–ö–≤–∞–Ω—Ç–æ–≤—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –º–µ–Ω—Ç–æ—Ä",
    "–≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞",
    "–ü–æ–º–æ–≥–∞—é –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ø—Ä–æ—Ä—ã–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
];

// ========================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –°–¢–†–ê–ù–ò–¶–´
// ========================================

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–µ–Ω–¥–∏–Ω–≥–∞ –ï–ª–µ–Ω—ã –ì—Ä–µ–±–µ–Ω—Ü–æ–≤–æ–π');
    
    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    initTypingEffect();
    initScrollAnimations();
    initParticleSystem();
    initParallaxEffect();
    initRippleEffect();
    initSmoothScroll();
    initNavigationEffects();
    
    console.log('‚úÖ –í—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
});

// ========================================
// –≠–§–§–ï–ö–¢ –ü–ï–ß–ê–¢–ê–Æ–©–ï–ô–°–Ø –ú–ê–®–ò–ù–ö–ò
// ========================================

function initTypingEffect() {
    const typingElement = document.getElementById('typing-text');
    if (!typingElement) return;
    
    let textIndex = 0;
    let charIndex = 0;
    let isDeleting = false;
    let isPaused = false;
    
    function typeText() {
        const currentText = typingTexts[textIndex];
        
        if (isDeleting) {
            typingElement.textContent = currentText.substring(0, charIndex - 1);
            charIndex--;
        } else {
            typingElement.textContent = currentText.substring(0, charIndex + 1);
            charIndex++;
        }
        
        let typeSpeed = isDeleting ? TYPING_SPEED / 2 : TYPING_SPEED;
        
        if (!isDeleting && charIndex === currentText.length) {
            // –ü–∞—É–∑–∞ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
            typeSpeed = 2000;
            isDeleting = true;
        } else if (isDeleting && charIndex === 0) {
            isDeleting = false;
            textIndex = (textIndex + 1) % typingTexts.length;
            typeSpeed = 500;
        }
        
        setTimeout(typeText, typeSpeed);
    }
    
    // –ó–∞–ø—É—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(typeText, TYPING_DELAY);
}

// ========================================
// –ê–ù–ò–ú–ê–¶–ò–ò –ü–†–ò –°–ö–†–û–õ–õ–ï
// ========================================

function initScrollAnimations() {
    const observerOptions = {
        root: null,
        rootMargin: '0px 0px -100px 0px',
        threshold: 0.1
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if (entry.target.classList.contains('expertise-list')) {
                    animateListItems(entry.target);
                }
            }
        });
    }, observerOptions);
    
    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    const elementsToAnimate = document.querySelectorAll('.fade-in-element');
    elementsToAnimate.forEach(el => {
        observer.observe(el);
    });
}

// –ê–Ω–∏–º–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏
function animateListItems(listElement) {
    const items = listElement.querySelectorAll('li');
    items.forEach((item, index) => {
        setTimeout(() => {
            item.style.opacity = '1';
            item.style.transform = 'translateX(0)';
        }, index * 100);
    });
}

// ========================================
// –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ò–¶
// ========================================

function initParticleSystem() {
    const container = document.getElementById('particles-container');
    if (!container) return;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
    for (let i = 0; i < PARTICLE_COUNT; i++) {
        createParticle(container);
    }
}

function createParticle(container) {
    const particle = document.createElement('div');
    particle.className = 'particle';
    
    // –°–ª—É—á–∞–π–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–∏—Ü—ã
    const size = Math.random() * 4 + 1;
    const startX = Math.random() * window.innerWidth;
    const startY = Math.random() * window.innerHeight;
    const duration = Math.random() * 20 + 10;
    const opacity = Math.random() * 0.3 + 0.1;
    
    // –°—Ç–∏–ª–∏ —á–∞—Å—Ç–∏—Ü—ã
    Object.assign(particle.style, {
        position: 'absolute',
        left: startX + 'px',
        top: startY + 'px',
        width: size + 'px',
        height: size + 'px',
        background: `radial-gradient(circle, rgba(0, 217, 255, ${opacity}) 0%, transparent 70%)`,
        borderRadius: '50%',
        pointerEvents: 'none',
        animation: `particleFloat ${duration}s linear infinite`
    });
    
    container.appendChild(particle);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü—ã
    setTimeout(() => {
        if (particle.parentNode) {
            particle.remove();
            createParticle(container); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç–∏—Ü—É
        }
    }, duration * 1000);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —á–∞—Å—Ç–∏—Ü
const particleStyle = document.createElement('style');
particleStyle.textContent = `
    @keyframes particleFloat {
        0% {
            transform: translate(0, 0) rotate(0deg);
            opacity: 0;
        }
        10% {
            opacity: 1;
        }
        90% {
            opacity: 1;
        }
        100% {
            transform: translate(${Math.random() * 200 - 100}px, -100vh) rotate(360deg);
            opacity: 0;
        }
    }
`;
document.head.appendChild(particleStyle);

// ========================================
// –ü–ê–†–ê–õ–õ–ê–ö–° –≠–§–§–ï–ö–¢
// ========================================

function initParallaxEffect() {
    const floatingElements = document.querySelectorAll('.floating-circle');
    
    let mouseX = 0;
    let mouseY = 0;
    let windowWidth = window.innerWidth;
    let windowHeight = window.innerHeight;
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
    window.addEventListener('resize', () => {
        windowWidth = window.innerWidth;
        windowHeight = window.innerHeight;
    });
    
    // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞
    function updateParallax() {
        const scrollY = window.pageYOffset;
        
        floatingElements.forEach((element, index) => {
            if (!element) return;
            
            // –†–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const speed = 0.5 + (index * 0.2);
            const mouseInfluence = 0.02 + (index * 0.01);
            
            // –†–∞—Å—á–µ—Ç —Å–º–µ—â–µ–Ω–∏—è
            const deltaX = (mouseX - windowWidth / 2) * mouseInfluence;
            const deltaY = (mouseY - windowHeight / 2) * mouseInfluence;
            const scrollOffset = scrollY * speed;
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            element.style.transform = `translate(${deltaX}px, ${deltaY - scrollOffset}px) rotate(${scrollY * 0.1}deg)`;
        });
        
        requestAnimationFrame(updateParallax);
    }
    
    // –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
    if (floatingElements.length > 0) {
        updateParallax();
    }
}

// ========================================
// RIPPLE –≠–§–§–ï–ö–¢ –î–õ–Ø –ö–ù–û–ü–û–ö
// ========================================

function initRippleEffect() {
    const rippleButtons = document.querySelectorAll('.ripple-button');
    
    rippleButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            // –°–æ–∑–¥–∞–Ω–∏–µ ripple —ç–ª–µ–º–µ–Ω—Ç–∞
            const ripple = document.createElement('span');
            const rect = this.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;
            
            ripple.style.cssText = `
                position: absolute;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.6);
                transform: scale(0);
                animation: rippleEffect 0.6s linear;
                left: ${x}px;
                top: ${y}px;
                width: ${size}px;
                height: ${size}px;
                pointer-events: none;
                z-index: 1;
            `;
            
            this.appendChild(ripple);
            
            // –£–¥–∞–ª–µ–Ω–∏–µ ripple –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                ripple.remove();
            }, 600);
        });
    });
}

// CSS –¥–ª—è ripple –∞–Ω–∏–º–∞—Ü–∏–∏
const rippleStyle = document.createElement('style');
rippleStyle.textContent = `
    @keyframes rippleEffect {
        to {
            transform: scale(4);
            opacity: 0;
        }
    }
`;
document.head.appendChild(rippleStyle);

// ========================================
// –ü–õ–ê–í–ù–ê–Ø –ü–†–û–ö–†–£–¢–ö–ê
// ========================================

function initSmoothScroll() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
    const navLinks = document.querySelectorAll('nav a[href^="#"]');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            
            if (targetElement) {
                const offsetTop = targetElement.offsetTop - 80; // –£—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                
                window.scrollTo({
                    top: offsetTop,
                    behavior: 'smooth'
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏
                navLinks.forEach(l => l.classList.remove('active'));
                this.classList.add('active');
            }
        });
    });
}

// ========================================
// –≠–§–§–ï–ö–¢–´ –ù–ê–í–ò–ì–ê–¶–ò–ò
// ========================================

function initNavigationEffects() {
    const nav = document.querySelector('nav');
    let lastScrollY = window.scrollY;
    
    window.addEventListener('scroll', () => {
        const currentScrollY = window.scrollY;
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        if (currentScrollY > 50) {
            nav.classList.add('scrolled');
        } else {
            nav.classList.remove('scrolled');
        }
        
        // –°–∫—Ä—ã—Ç–∏–µ/–ø–æ–∫–∞–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        if (currentScrollY > lastScrollY && currentScrollY > 200) {
            nav.style.transform = 'translateY(-100%)';
        } else {
            nav.style.transform = 'translateY(0)';
        }
        
        lastScrollY = currentScrollY;
    });
    
    // –≠—Ñ—Ñ–µ–∫—Ç hover –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const navItems = document.querySelectorAll('nav ul li a');
    navItems.forEach(item => {
        item.addEventListener('mouseenter', function() {
            this.style.animation = 'navItemHover 0.3s ease-out';
        });
        
        item.addEventListener('mouseleave', function() {
            this.style.animation = '';
        });
    });
}

// CSS –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
const navStyle = document.createElement('style');
navStyle.textContent = `
    nav {
        transition: transform 0.3s ease, background 0.3s ease;
    }
    
    @keyframes navItemHover {
        0% { transform: translateY(0); }
        50% { transform: translateY(-3px); }
        100% { transform: translateY(0); }
    }
    
    nav ul li a.active {
        background: rgba(0, 217, 255, 0.2);
        border-radius: 25px;
    }
`;
document.head.appendChild(navStyle);

// ========================================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´
// ========================================

// –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    const socialCards = document.querySelectorAll('.social-card');
    
    socialCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-15px) scale(1.05)';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
            const icon = this.querySelector('.social-icon');
            if (icon) {
                icon.style.filter = 'drop-shadow(0 0 20px currentColor)';
            }
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = '';
            
            const icon = this.querySelector('.social-icon');
            if (icon) {
                icon.style.filter = '';
            }
        });
    });
});

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ (–µ—Å–ª–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
function animateCounter(element, start, end, duration) {
    if (!element) return;
    
    const range = end - start;
    const increment = range / (duration / 16); // 60 FPS
    let current = start;
    
    const timer = setInterval(() => {
        current += increment;
        element.textContent = Math.floor(current);
        
        if (current >= end) {
            element.textContent = end;
            clearInterval(timer);
        }
    }, 16);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function optimizePerformance() {
    // –î–µ–±–∞—É–Ω—Å –¥–ª—è —Ä–µ—Å–∞–π–∑–∞ –æ–∫–Ω–∞
    let resizeTimeout;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            // –ü–µ—Ä–µ—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            console.log('üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –Ω–æ–≤–æ–º—É —Ä–∞–∑–º–µ—Ä—É –æ–∫–Ω–∞');
        }, 250);
    });
    
    // Intersection Observer –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    if (mediaQuery.matches) {
        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        document.body.classList.add('reduce-motion');
    }
}

// –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
document.addEventListener('DOMContentLoaded', optimizePerformance);

// ========================================
// –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
// ========================================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–≤–Ω–µ
window.EGLanding = {
    animateCounter,
    initTypingEffect,
    initParticleSystem,
    initParallaxEffect
};

console.log('üé® –õ–µ–Ω–¥–∏–Ω–≥ –ï–ª–µ–Ω—ã –ì—Ä–µ–±–µ–Ω—Ü–æ–≤–æ–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');